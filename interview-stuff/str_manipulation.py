"""
 Manipulating Strings
Escape characters

An escape character is created by typing a backslash \ followed by the character you want to insert.
"""
print("Hello there!\nHow are you?\nI\'m doing fine.")

# Raw strings
# A raw string entirely ignores all escape characters and 
# prints any backslash that appears in the string.

print(r"Hello there!\nHow are you?\nI\'m doing fine.")

# Multiline Strings

print(
"""Dear Alice,
Eve's cat has been arrested for catnapping,
cat burglary, and extortion.
Sincerely,
Bob"""
)

# Indexing and Slicing strings

# H   e   l   l   o       w   o   r   l   d    !
# 0   1   2   3   4   5   6   7   8   9   10   11


# Indexing

spam = 'Hello world!'
print(spam[0])
# 'H'

print(spam[4])
# 'o'

print(spam[-1])
# '!'

# Slicing

spam = 'Hello world!'

print(spam[0:5])
# 'Hello'

print(spam[:5])
# 'Hello'

print(spam[6:])
# 'world!'

print(spam[6:-1])
# 'world'

print(spam[:-1])
# 'Hello world'

print(spam[::-1])
# '!dlrow olleH'

fizz = spam[0:5]
print(fizz)
# 'Hello'


# upper(), lower() and title()
# Transforms a string to upper, lower and title case:

greet = 'Hello world!'
print(greet.upper())
# 'HELLO WORLD!'

print(greet.lower())
# 'hello world!'

print(greet.title())
# 'Hello World!'

# isupper() and islower() methods
# Returns True or False after evaluating if a string is in upper or lower case:

spam = 'Hello world!'
print(spam.islower())
# False

print(spam.isupper())
# False

print('HELLO'.isupper())
# True

print('abc12345'.islower())
# True

print('12345'.islower())
# False

print('12345'.isupper())
# False

print('*'*20)

# join() and split()

# join()

# The join() method takes all the items in an iterable, like a list, dictionary, tuple or set, 
# and joins them into a string. You can also specify a separator.

print(''.join(['My', 'name', 'is', 'Simon']))
# 'MynameisSimon'

print(', '.join(['cats', 'rats', 'bats']))
# 'cats, rats, bats'

print(' '.join(['My', 'name', 'is', 'Simon']))
# 'My name is Simon'

print('ABC'.join(['My', 'name', 'is', 'Simon']))
# 'MyABCnameABCisABCSimon'


# split()

# The split() method splits a string into a list. 
# By default, it will use whitespace to separate the items, 
# but you can also set another character of choice:

print('My name is Simon'.split())
# ['My', 'name', 'is', 'Simon']

print('MyABCnameABCisABCSimon'.split('ABC'))
# ['My', 'name', 'is', 'Simon']

print('My name is Simon'.split('m'))
# ['My na', 'e is Si', 'on']

print(' My  name is  Simon'.split())
# ['My', 'name', 'is', 'Simon']

print(' My  name is  Simon'.split(' '))
# ['', 'My', '', 'name', 'is', '', 'Simon']

print('JUSTIFY'.center(20,'*'))

# Justifying text with rjust(), ljust() and center()

print('Hello'.rjust(10))
# '     Hello'

print('Hello'.rjust(20))
# '               Hello'

print('Hello World'.rjust(20))
# '         Hello World'

print('Hello'.ljust(10))
# 'Hello     '

print('Hello'.center(20))
# '       Hello       '

# An optional second argument to rjust() and ljust() will specify a fill character apart from a space character:

print('Hello'.rjust(20, '*'))
# '***************Hello'

print('Hello'.ljust(20, '-'))
# 'Hello---------------'

print('Hello'.center(20, '='))
# '=======Hello========'


print("STRIP".center(30,"*"))
# Removing whitespace with strip(), rstrip(), and lstrip()

spam = '    Hello World     '
print(spam.strip())
# 'Hello World'

print(spam.lstrip())
# 'Hello World     '

print(spam.rstrip())
# '    Hello World'

spam = 'SpamSpamBaconSpamEggsSpamSpam'
print(spam.strip('ampS'))
# 'BaconSpamEggs'


# Formatting Digits

# Adding thousands separator

a = 10000000
print(f"{a:,}")
# '10,000,000'

# Rounding

a = 3.1415926
print(f"{a:.2f}")
# '3.14'

# Showing as Percentage

a = 0.816562
print(f"{a:.2%}")
# '81.66%'

# Template Strings

# A simpler and less powerful mechanism, but it is recommended when handling strings generated by users. Due to their reduced complexity, template strings are a safer choice.

from string import Template
name = 'Elizabeth'
t = Template('Hey $name!')
print(t.substitute(name=name))
# 'Hey Elizabeth!'






