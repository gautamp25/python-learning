from threading import Thread
from time import sleep
class Example:
    @classmethod
    def display(self,n):
        for _ in range(n):
            print("Hello World")
# e1 = Example()
# if method is class method then need to give class reference
t1 = Thread(target=Example.display, args=(4,))
t1.start()
for _ in range(4):
    print("Welcome")

print("*"*10)
# Create Thread by extending Thread class | run method
# Advantages of this way is- You can access data generated by threads.
videos = ['Multithreading','OOP concepts','File handling','Memory Management']
class MyThreadClass(Thread):
    def __init__(self):
        print("Constructor called..")
        Thread.__init__(self)
    def run(self):
        for vid in videos:
            print(f"{vid}- Started uploading....")
            sleep(2)
            print(f"{vid} uploaded.")

t1= MyThreadClass()
t1.start()

for _ in range(4):
    sleep(0.5)
    print("Checking for copyrights.")
    
